---
source: borsh-derive/src/internals/schema/enums/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl borsh::BorshSchema for X {
    fn declaration() -> borsh::schema::Declaration {
        format!("{}::{}", std::module_path!(), "X")
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ___XA;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ___XB;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ___XC;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ___XD;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ___XE;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ___XF;
        <___XA as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <___XB as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <___XC as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <___XD as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <___XE as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <___XF as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let definition = borsh::schema::Definition::Enum {
            tag_width: 1,
            variants: borsh::__private::maybestd::vec![
                (u8::from(0) as i64, "A".into(), < ___XA as borsh::BorshSchema >
                ::declaration()), (u8::from(20) as i64, "B".into(), < ___XB as
                borsh::BorshSchema > ::declaration()), (u8::from(20 + 1) as i64, "C"
                .into(), < ___XC as borsh::BorshSchema > ::declaration()), (u8::from(20 +
                1 + 1) as i64, "D".into(), < ___XD as borsh::BorshSchema >
                ::declaration()), (u8::from(10) as i64, "E".into(), < ___XE as
                borsh::BorshSchema > ::declaration()), (u8::from(10 + 1) as i64, "F"
                .into(), < ___XF as borsh::BorshSchema > ::declaration())
            ],
        };
        borsh::schema::add_definition(
            <Self as borsh::BorshSchema>::declaration(),
            definition,
            definitions,
        );
    }
}
