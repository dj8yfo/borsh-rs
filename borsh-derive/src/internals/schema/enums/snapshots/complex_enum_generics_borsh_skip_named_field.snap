---
source: borsh-derive/src/internals/schema/enums/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl<W, U, C> borsh::BorshSchema for A<W, U, C>
where
    U: borsh::BorshSchema,
    C: borsh::BorshSchema,
{
    fn declaration() -> borsh::schema::Declaration {
        let params = borsh::__private::maybestd::vec![
            < U as borsh::BorshSchema > ::declaration(), < C as borsh::BorshSchema >
            ::declaration()
        ];
        format!(r#"{}::{}<{}>"#, std::module_path!(), "A", params.join(", "))
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ___ABacon;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ___AEggs;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ___ASalad<C>(Tomatoes, C, Oil);
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ___ASausage<W, U> {
            #[borsh(skip)]
            wrapper: W,
            filling: Filling,
            unexpected: U,
        }
        <___ABacon as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <___AEggs as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <___ASalad<C> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <___ASausage<
            W,
            U,
        > as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let definition = borsh::schema::Definition::Enum {
            tag_width: 1,
            variants: borsh::__private::maybestd::vec![
                (u8::from(0u8) as i64, "Bacon".into(), < ___ABacon as borsh::BorshSchema
                > ::declaration()), (u8::from(1u8) as i64, "Eggs".into(), < ___AEggs as
                borsh::BorshSchema > ::declaration()), (u8::from(2u8) as i64, "Salad"
                .into(), < ___ASalad < C > as borsh::BorshSchema > ::declaration()),
                (u8::from(3u8) as i64, "Sausage".into(), < ___ASausage < W, U > as
                borsh::BorshSchema > ::declaration())
            ],
        };
        borsh::schema::add_definition(
            <Self as borsh::BorshSchema>::declaration(),
            definition,
            definitions,
        );
    }
}
