---
source: borsh-schema-derive-internal/src/enum_schema.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl<C, W> borsh::BorshSchema for A<C, W>
where
    C: borsh::BorshSchema,
    W: borsh::BorshSchema,
{
    fn declaration() -> borsh::schema::Declaration {
        let params = borsh::__private::maybestd::vec![
            < C > ::declaration(), < W > ::declaration()
        ];
        format!(r#"{}<{}>"#, "A", params.join(", "))
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        struct ABacon<C, W>(#[borsh_skip] ::core::marker::PhantomData<(C, W)>);
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        struct AEggs<C, W>(#[borsh_skip] ::core::marker::PhantomData<(C, W)>);
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        struct ASalad<C, W>(
            Tomatoes,
            C,
            Oil,
            #[borsh_skip]
            ::core::marker::PhantomData<(C, W)>,
        );
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        struct ASausage<C, W> {
            wrapper: W,
            filling: Filling,
            #[borsh_skip]
            borsh_schema_phantom_data: ::core::marker::PhantomData<(C, W)>,
        }
        <ABacon<C, W> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <AEggs<C, W> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <ASalad<C, W> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <ASausage<C, W> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let variants = borsh::__private::maybestd::vec![
            ("Bacon".to_string(), < ABacon < C, W > > ::declaration()), ("Eggs"
            .to_string(), < AEggs < C, W > > ::declaration()), ("Salad".to_string(), <
            ASalad < C, W > > ::declaration()), ("Sausage".to_string(), < ASausage < C, W
            > > ::declaration())
        ];
        let definition = borsh::schema::Definition::Enum {
            variants,
        };
        Self::add_definition(Self::declaration(), definition, definitions);
    }
}

