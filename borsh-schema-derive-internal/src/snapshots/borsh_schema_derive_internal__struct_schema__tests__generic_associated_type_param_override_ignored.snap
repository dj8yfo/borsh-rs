---
source: borsh-schema-derive-internal/src/struct_schema.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl<V, T> borsh::BorshSchema for Parametrized<V, T>
where
    T: TraitName,
    V: borsh::BorshSchema,
{
    fn declaration() -> borsh::schema::Declaration {
        let params = borsh::__private::maybestd::vec![< V > ::declaration()];
        format!(r#"{}<{}>"#, "Parametrized", params.join(", "))
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        let fields = borsh::schema::Fields::NamedFields(
            borsh::__private::maybestd::vec![
                ("another".to_string(), < V as borsh::BorshSchema > ::declaration())
            ],
        );
        let definition = borsh::schema::Definition::Struct {
            fields,
        };
        let no_recursion_flag = definitions.get(&Self::declaration()).is_none();
        Self::add_definition(Self::declaration(), definition, definitions);
        if no_recursion_flag {
            <V as borsh::BorshSchema>::add_definitions_recursively(definitions);
        }
    }
}

